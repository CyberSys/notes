<Python Attributes and Methods>

[Chapter 1. New Attribute Access]

1.1 The Dynamic __dict__

    user-provided attribute vs Python-provided attribute

    __dict__ only contain user-provided attributes(?)

    on the other hand, dir() return all available attributes of a object.

    The built-in dir() function returns a list of all attributes of an object. Also look at the inspect module in the standard library for more functions to inspect objects.

    Some objects, such as built-in types and their instances (lists, tuples, etc.) do not have a __dict__. Consequently user-defined attributes cannot be set on them.


1.2 From Function to Method

    >>> class C(object):
            def f(self): pass

    >>> c.f is C.f
    >>> False

    >>> c.f is C.__dict__['f']
    >>> False

    It is only the presence of the __get__() method that transforms an ordinary function into a bound method.

1.3 Creating Descriptors

    when accessed from the class itself, only the __get__() method comes in the picture, setting or deleting the attribute will actually replace or remove the descriptor.

    Descriptors work 'ONLY' when attached to classes. Sticking a descriptor in an object that is not a class gives us nothing.

1.4 Two Kinds of Descriptors

    Data vs Non-data descriptors

1.5 Attribute Search Summary


1.6 Descriptors In The Box

    When a attribute created by property is accessed from class instead of instance, python return the property object it self.

    >>> class C(object):
            @property
            def foo(self):
                return 'foo'
    >>> c = C()

    >>> c.foo
    >>> 'foo'

    >>> C.foo
    >>> <property object at 0xa470c5c>

    The property object is holding on to the actual functions provided when it it is created. So, redefining getter/setter function in the subclass would't impact the existing property.

    Python functions are descriptors too.


    A property is always a data-descriptor.

    Classmethods and staticmethods are non-data descriptors.

[Chapter 2. Method Resolution Order]

2.3 A Super Solution

    Python provides a class attribute __mro__ for each class, and a type called super.

    The super() call creates a super object. It finds the next class after B in self.__class__.__mro__. Attributes accessed on the super object are searched on the next class and returned.

    When using super() the first parameter should always be the same as the class in which it is being used.

    Fortunately for us, super works even with a class as the second argument; This is because that super() only use self to get self.__class__.__mro__ ;

    While using super we typically use only one super call in one method even if the class has multiple bases.

2.4 Computing the MRO

[Chapter 3. Usage Notes]

3.1 Special Methods

    Special methods work on class only.




<Python Types and Objects>

[Chapter 1. Basic Concepts]

1.1 The Object Within

    A object has an identity, a value, a type, and one or more bases(Not all objects have bases but some special ones do.)

    A base is similar to a super-class or base-class in object-oriented lingo.

    You might think an object has a name but the name is not really part of the object.

Rule 1. Everything is an object

    Calling type() on an object just returns the value of the __class__ attribute.

1.3 Relationships

    subclass-superclass relationship & type-instance relationship

Chapter 2. Bring In The Objects

2.1 The First Objects

    In reality, 'type' is both an object itself, and a way to get the type of another object.

    'type' and 'object' are the two primitive object in Python. The two are inter-dependent; they can't stand alone since they are defined in each other.

    Both the objects we introduced are type objects. So what do we mean by type objects? Type objects share the following traits:

        They are used to represent abstract data types in programs.

        They can be subclassed.

        They can be instantiated

        The type of any type object.

        They are lovingly called types by some,  and classes by others

    Types and classes are really the same in Python. No wonder the type() function and the __class__ attribute get
you the same thing.

    The term class was traditionally used to refer to a class created by the class statement. Built-in types (such as int and string) are not usually referred to as classes, but that's more of a convention thing and in reality types and classes are exactly the same thing.

    Type Or Non-type Test Rule
        If an object is an instance of <type 'type'>, then it is a type. Otherwise, it is not a type.

    There are only two kinds of objects in Python: to be unambiguous let's call these types and non-types.

2.2 More Built-in Types

    the two primitives come with a whole gang of buddies.

2.3 New Objects by Subclassing

    New objects cannot pop out of thin air. They have to be built using existing objects.

2.4 New Objects by Instantiating

2.5 It's All Instantiation. Really


[Chapter 3. Wrap Up]

3.1 The Python Objects Map

    Figure 3.1. The Python Objects Map

    Here we also unravel the mystery of the vertical grey lines. They just segregate objects into three spaces based on what the common man calls them - metaclasses, classes, or instances.

    <type 'type'> is indeed a type of all types, and <type 'object'> a superclass of all types (except itself).

3.2 Summary

    There are two kinds of objects in Python:

    1. Type objects - can create instances, can be subclassed.
    2. Non-type objects - cannot create instances, cannot be subclassed.



