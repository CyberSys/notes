1.  History
====================

In the context of Unix, the use of the ed line editor provided diff with the
natural ability to create machine-usable "edit scripts". These edit scripts,
when saved to a file, can, along with the original file, be reconstituted by
`ed` into the modified file .

In 1985, Larry Wall composed a separate utility, patch, that generalized and
extended the ability to modify files with diff output.

2. Algorithm
====================

The operation of diff is based on solving the **longest common subsequence**
problem.

From a longest common subsequence it's only a small step to get diff-like
output:

    -   if an item is absent in the subsequence but present in the **original**,
        it must have been **deleted**.

    -   If an item is absent in the subsequence but present in the **new**
        sequence, it must have been **added** in.

3. Usage
====================

In this **traditional/default** output format of diff, `a` stands for added,
`d` for deleted and `c` for changed. Line numbers of the original file appear
**before** a/d/c and those of the modified file appear **after**. `Angle
brackets` appear at the beginning of lines that are added, deleted or changed.

4. Variations
====================

4.1  ED script
--------------------

An ed script can still be generated by modern versions of diff with the `-e`
option.

4.2  Context format
--------------------

The context format of diff introduced at Berkeley helped with distributing
patches for source code that may have been changed minimally.

In the context format, any changed lines are shown **alongside** unchanged
lines before and after as its context. The context serves **as a reference**
to **locate** the lines' place in a modified file and find the intended
location for a change to be applied, **regardless** of whether line numbers
still correspond. It introduces great **readability** for humans and
**reliability** when applying the patch.

The number of unchanged lines shown above and below a change hunk can be
controlled by the user, but 3 lines is **typically the default**. If the
context in a hunk overlap with an adjacent hunk, then `diff` will avoid
duplicating the unchanged lines and combine the hunks into a single hunk.

A "`!`" represents a change between lines that correspond in the two files.
A "`+`" represents the addition of a line, while a blank space represents an
unchanged line.

At the beginning of the patch is the **file information**, including the **full
path** and **time stamp**.

At the beginning of each hunk are the line numbers that apply for the
corresponding change in the files. A number range appearing between sets of
`three asterisks` applies to the **original** file, while sets of `three
dashes` apply to the **new** file. The hunk ranges specify the starting and
ending line numbers in the respective file.

`diff -c original new` will produce the diff in context format.


4.3 Unified format
--------------------

The unified format (or unidiff) **inherits the improvements** made by the
context format, but produces a **smaller** diff with old and new text
**presented immediately adjacent**. Unified format is usually invoked using
the `-u` option. This output is **often used as input to the patch program**.
Many projects specifically request that "diffs" be submitted in the unified
format, making unified diff format the **most common format** for exchange
between software developers.

The format starts with the same **two-line header** as the context format,
except that the original file is preceded by "`---`" and the new file is
preceded by "`+++`". Following this are one or more change hunks that contain
the line differences in the file. The unchanged, contextual lines are preceded
by a `space character`, addition lines are preceded by a `+`, and
deletion lines are preceded by a `-`.

A hunk begins with range information and is immediately followed with the line
additions, line deletions, and any number of the contextual lines. The range
information is **surrounded** by `@@` in a single line. The format of the range
information line is as follows::

    @@ -l,s +l,s @@

The hunk range information contains **two hunk ranges**. The range for the hunk
of the original file is preceded by a `minus symbol`, and the range for the new
file is preceded by a `plus symbol`. Each hunk range is of the format `l,s`
where `l` is the **starting line number** and `s` is the **number of lines** the
change hunk applies to for each respective file. Note that the **only really
interesting value** is the `l` of the first range; all the other values can be
computed from the diff.

The hunk range for the original should be the **sum of** all contextual and
deletion (including changed) hunk lines. The hunk range for the new file should
be the **sum of** all contextual and addition (including changed) hunk lines.

If one line is modified, it is **represented as a deletion and addition**. Since
the hunks of the original and new file appear in the same hunk, such changes
would appear adjacent to one another.

4.4 Others
------------

`diff3` compares one file against two other files. It was originally developed
to reconcile changes made by two people editing a common source. It is also
used internally by many revision control systems.

